# Задание 2.2. Дан список:
# ['в', '5', 'часов', '17', 'минут', 'температура', 'воздуха', 'была', '+5', 'градусов']
#
# Необходимо его обработать — обособить каждое целое число (вещественные не трогаем) кавычками (добавить кавычку до и кавычку после элемента списка, являющегося числом) и дополнить нулём до двух целочисленных разрядов:
# ['в', '"', '05', '"', 'часов', '"', '17', '"', 'минут', 'температура', 'воздуха', 'была', '"', '+05', '"', 'градусов']
#
# Сформировать из обработанного списка строку:
# в "05" часов "17" минут температура воздуха была "+05" градусов
#
# Подумать, какое условие записать, чтобы выявить числа среди элементов списка? Как модифицировать это условие для чисел со знаком?
# Примечание: если обособление чисел кавычками не будет получаться - можете вернуться к его реализации позже. Главное: дополнить числа до двух разрядов нулём!

# Задание 2.3. * Решить задачу 2 не создавая новый список (как говорят, in place). Эта задача намного серьёзнее, чем может сначала показаться.


my_list = ['в', '5', 'часов', '17', 'минут', 'температура', 'воздуха', 'была', '+5', 'градусов']

i = 0
while i < len(my_list):
# Обособление цифр двойными кавычками
    if my_list[i].isdigit():
        my_list.insert(i, '"')
        my_list[i + 1] = f'{int(my_list[i + 1]):02}'
        my_list.insert(i + 2, '"')
        i += 2
# Обособление цифр со знаком "+" или "-" двойными кавычками
    elif (my_list[i].startswith('+') or my_list[i].startswith('-')) and \
            my_list[i][1:].isdigit():
        my_list.insert(i, '"')
        my_list[i + 1] = f'{my_list[i + 1][0]}{int(my_list[i + 1]):02}'
        my_list.insert(i + 2, '"')
        i += 2
    i += 1
out_info = ' '.join(my_list)

# Удаление лишних пробелов между кавычками
symbol_idxs = []
for idx, letter in enumerate(out_info):
    if letter == '"':
        symbol_idxs.append(idx)
for idx in range(len(symbol_idxs)):
    if idx % 2 == 0:
        symbol_idxs[idx] = symbol_idxs[idx] + 1
    else:
        symbol_idxs[idx] = symbol_idxs[idx] - 1
for del_idx in reversed(symbol_idxs):
    out_info = out_info[:del_idx] + out_info[del_idx + 1:]
print(out_info)